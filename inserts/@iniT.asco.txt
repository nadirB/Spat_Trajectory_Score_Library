;inits for Spat5 implementation
/* @macro_def @init_TSL($zoom=65) {
antescofo::suivi 0
temporal $RT_TEMPO
@viewer_zoom($zoom)
@viewer_div(0)
@viewer_numdiv(16)
@viewer_anchors_visible(0)
@viewer_layout(single)
@sources_position(0,0)
@history_clear
OSC_BUNDLE clear
@player(0,0,0,0)
@multiplayer(0,0) } */

/* @macro_def @history_clear() {
    oscsend history "127.0.0.1" :4072
    history "/source/[1-4]/history/clear"
} */

;audio players presets

@macro_def @sources_position_init() {

group sources_position_init
{
  ::rectilinear(1, a=1, b=0, alpha=0, beta=0, speed=0)
  ::rectilinear(2, a=0, b=-1, alpha=0, beta=0, speed=0)
  ::rectilinear(3, a=-1, b=0, alpha=0, beta=0, speed=0)
  ::rectilinear(4, a=0, b=1, alpha=0, beta=0, speed=0)
} }


@macro_def @player($sf1=1, $loop=0, $gain1=0.7, $ch=1) {
    play $sf1
    play_loop $loop
    play_gain $gain1
    play_channel $ch
}


;@player(4, 1, 0.5, 4)

@macro_def @multiplayer($sf2, $gain2) {
    playAll $sf2
    play_gain2 $gain2
}

;@multiplayer(5, 0.1)

;viewer presets
/* @macro_def @viewer_zoom($zoom) {
    oscsend spat_zoom "127.0.0.1" :4072 "/display/zoom"
    spat_zoom $zoom } */

@macro_def @viewer_bounds($bounds) {
    oscsend viewer_bounds "127.0.0.1" :4072 "/window/bounds"
    viewer_bounds $bounds }
;@viewer_bounds(690 10 750 600)

@macro_def @viewer_anchors_visible($anchors_visible) {
    oscsend viewer_anchors_visible "127.0.0.1" :4072 "/anchor/[1-16]/visible"
    viewer_anchors_visible $anchors_visible }

@macro_def @viewer_layout($viewer_layout) {
    oscsend viewer_layout "127.0.0.1" :4072 "/layout"
    viewer_layout $viewer_layout }

@macro_def @viewer_div($div) {
        oscsend viewer_div "127.0.0.1" :4072 "/grid/angulardivisions/visible"
        viewer_div $div }

@macro_def @viewer_numdiv($numdiv) {
        oscsend viewer_numdiv "127.0.0.1" :4072 "/grid/angulardivisions/number"
        viewer_numdiv $numdiv }

;spatial init process

@macro_def @speakers($speakers) {
      oscsend speakers_num "127.0.0.1" :4072 "/speaker/number"
      speakers_num $speakers }

@macro_def @OneSrcPos($src=1, $a=0,$d=1){
$prefix := "/source/" + $src + "/ad"
oscsend initOne "127.0.0.1" : 4072 $prefix
initOne $a $d}
;@OneSrcPos(2, 0, 0)

;@OneSrcPos()

@macro_def @sources_position($a,$d) {
    oscsend src_position "127.0.0.1" :4072 "/source/[1-4]/ad"
    src_position $a $d }

@global  $AllQuad, $AllRight, $AllLeft, $AllFront, $AllBack

$AllQuad := map { (1, [-45, 1]), (2, [45, 1]), (3, [135, 1]), (4, [-135, 1]) }

$AllRight := map { (1, [90, 1]), (2, [90,1 ]), (3, [90, 1]), (4, [90, 1]) }

$AllLeft := map { (1, [-90, 1]), (2, [-90, 1]), (3, [-90, 1]), (4, [-90, 1]) }

$AllFront := map { (1, [0, 1]), (2, [0, 1]), (3, [0, 1]), (4, [0, 1]) }

$AllBack := map { (1, [180, 1]), (2, [180, 1]), (3, [180, 1]), (4, [180, 1]) }

@proc_def ::src_pos($coord){

  forall $src, $pos in $coord
  {
    $prefix := "/source/" + $src + "/ad"
    oscsend initAll "127.0.0.1" : 4072 $prefix
    initAll $pos
    ;print_message $pos
  }
}
;::src_pos($AllQuad)



//randomness

@fun_def @rand_range($min, $max) {@rand($max-$min)+$min}
;print_antescofo @rand_range(-1, 1)

@fun_def @rand_range_dur($min, $max) {@rand($max-$min)+$min}
;print_antescofo @rand_range(-1, 1)

@fun_def @drunk($val, $min, $max, $steep)
{
	if(($val >= $min)&&($val <= $max))
	{
		if (@rand(1.)> 0.5)
		{
			$val := $val + @rand($steep)
			return $val
		}else{
			$val := $val - @rand($steep)
			return $val
		}
	}else{
		if($val <= $min)
		{
			$val := $val + @rand($steep)
			return $val
		}else{
			$val := $val - @rand($steep)
			return $val
		}
	}
}

;print_antescofo @drunk(2, -1, 1, 1)


;;;;;;;Conversions

@global $deg, $rad, $pi
$pi := 3.141592653589793

@fun_def @rad2deg($rad) {
return ($rad*180)/$pi
}

@fun_def @deg2rad($deg) {
return $deg/180 ;Should be $deg*$pi/180 but $iniT & $targeT are already multiplied by $pi in the inserted traj process !!
}

/* print_message @deg2rad(45)
print_message @rad2deg(0.25*$pi) */


@fun_def @poltocar($r, $angle)
{
	@local $x, $y
	$x := $r * @cos(@deg2rad($angle))
	$y := $r * @sin(@deg2rad($angle))
	return [$x, $y]
}

;print_antescofo @poltocar(1, 135)


@fun_def beat2msec($X) {
	1000*$X*60.0/$RT_TEMPO
}

@fun_def msec2beat($X) {
	$X*$RT_TEMPO/(1000*60.0)
}

@fun_def beat2sec($X) {
	$X*60.0/$RT_TEMPO
}

@fun_def beat2ticks($X) {
	$X*4*480
}

@MACRO_DEF hz2ms($hz)
{
	expr{ (1/$hz)*1000.0 }
}

@MACRO_DEF hz2beat($hz)
{
	expr{ (1/$hz)*($RT_TEMPO/60.0) }
}

@fun_def hz_bms($hz)
{
	 (1/$hz)*1000.0*($RT_TEMPO/60.0)
}

;trajectory scenes

BPM 60

@insert "inserts/@iniT.asco.txt"
@insert "inserts/@circle_obj.asco.txt"
@init_TSL(70)

event 1 CUE_01

; ($src, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $speed)
$circle := obj::circle(count = 2,
  src = 1,
  iniT = 3/4,
  targeT = 2+3/4,
  radius = 1,
  offsetX = 0,
  offsetY = 0,
  speed = 8)

$circle.run()

4

$circle.circle_stop()

5

@history_clear
$circle.run()
$circle.change_speed(2) //changes always occur the next tour for now
$circle.change_radius(0.5)
$circle.change_counter(2)




/* J'ai ajouté 2 méthodes : @stop() pour arrêter la méthode ::run en cours (s'il y en a une) et @change_speed() (qui ne fait pas grand chose mais au lieu d'écrire */

    /* $circle.$speed := 2

tu peux écrire */

;$circle.speed(2)

/* Ca fait pas beaucoup de différence, mais il faut imaginer que la méthode peut faire beaucoup plus de calcul si c'est nécessaire.

Dans la boucle du processus, il y a une conditionnelle qui permet d'implémenter l’arrêt : si l’arrêt à été demandé (via stop()), on se suicide lors du prochain tour de boucle. Cela ne tue pas l'objet : on peut se (re)lancer avec un run() */

@global $speed, $pi ; to use for setvar outControl with a whenever{(setvar...==setvar...)}
$pi := 3.141592653589793

@fun_def X($t, $radius, $offsetX){
  $radius*@cos($t) + $offsetX
}

@fun_def Y($t, $radius, $offsetY){
  $radius*@sin($t) + $offsetY
}

@obj_def obj::circle($src, $iniT, $targeT, $radius, $offsetX, $offsetY, $count, $speed)
{
  @local $cpt, $prefix, $stop

  @init {
    $cpt := 0
    $stop:= false
    $prefix := "/source/" + $src + "/xy"
    oscsend spat5 "127.0.0.1" : 4072 $prefix
  }


  @fun_def circle_stop() {
    $stop := true
    print_antescofo "circle process stops" $NOW
  }

  @fun_def change_speed($s)  { $speed := $s }
  @fun_def change_radius($r)  { $radius := $r }
  @fun_def change_counter($c)  { $count := $c }
  @fun_def change_offsetX($offx)  { $offsetX := $offx }


  @proc_def run()
  {
    @local $l
    $l := {
      loop circle_curve $speed @exclusive
      /* @abort := {
        print_message "Curve C aborted at " $t
        Curve AH @grain 0.1 @action := {
          print_message "handler curve: " $t
          spat5 @X($t, $radius, $offsetX) @Y($t, $radius, $offsetY)
        }

        {
          $t {
            { ($t) }
            $speed { ($iniT*$pi) }
          }
        }
      } */
      {
        if ($stop)
        {
          $stop := false
          abort $l
        }

        curve circleCurve @grain := 0.01s @Action := {

          spat5 @X($t, $radius, $offsetX) @Y($t, $radius, $offsetY)

        }

        {
          $t {
            { ($iniT*$pi)  } ; @type "exp"
            $speed { ($targeT*$pi) }

          }
        }

        $cpt := $cpt + 1
        print_antescofo count $cpt ":"


        } during[$count#]

      }
    }
  }



  ; ($src, $iniT, $targeT, $radius, $offsetX, $offsetY, $count, $speed)
  /* $o := obj::circle(count = 2,
  src = 1,
  iniT = 3/4,
  targeT = 2+3/4,
  radius = 1,
  offsetX = 0,
  offsetY = 0,
  speed = 8)


  $o.run()

  4

  $o.change_offsetX(2) */
  ;$o.change_radius(0.5)






;5 $o.circle_stop()

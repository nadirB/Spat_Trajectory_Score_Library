BPM 90

@insert "inserts/@speakers_position.asco.txt"
@insert "inserts/@Circle.asco.txt" 
@insert "inserts/@Circle_Varispeed.asco.txt"  ; insert varispeed process (in progress)

position_init ok

 oscsend spat_zoom "127.0.0.1" :4072 "/display/zoom"
spat_zoom 0.4

;position_init bang ; init spat sources and speakers positions

lcd_spat clear            ; init spat_screen
lcd_spat drawpict pattern
draw_coordinates 1        ; route xyz data
display 0

print_antescofo "Good to go!" 


 Event 1 circle_01

lcd_spat clear
lcd_spat drawpict pattern

source_syntax 1
 


; ::circle($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $speed)

;$cmd := source spat receiver

;$iniT := source initial position
;$targeT := source target position

;$offsetX := circle position according to xx' axe
;$offsetY := circle position according to yy' axe

;$count := n circle loop
;$speed := source mvt speed

; cf. patch_folder/figures_folder/figure I - trigonometry_circle.pdf and figure II

::circle("spat1", 0, 2, 1, 0, 0, 1, 4) ; 2π := 1 turn anti-clockwise with a radius of 1 during 4 beats

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat1", 0, -2, 1, 0, 0, 1, 4) ; -2π := 1 turn clockwise with a radius of 1 during 4 beats

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"


 Event 1 multi_circle_01

lcd_spat clear
lcd_spat drawpict pattern


; ::circle($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

::circle("spat1", 0,  2,  0.3,  0, 0, 1, 4) ; 2π := 1 turn anti-clockwise with a radius of 0.3 during 4 beats
::circle("spat2", 0, -1,  0.5,  0, 0, 1, 4) ; -2π * $count(2) := 2 turn clockwise with a radius of 0.5 during 4 beats
::circle("spat3", 0,  2,  0.7,  0, 0, 1, 4) ; 2π := 1 turn anti-clockwise with a radius of 0.7 during 4 beats

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 multi_circle_02

lcd_spat clear
lcd_spat drawpict pattern


@local $alpha, $rad, $pi
$alpha := 0.
$rad := 0.
$pi := 3.141592653589793

@fun_def @rad2deg($alpha) {   ; definition of a conversion function (degree <--> radian)

	($alpha*180)/$pi
}

@fun_def @deg2rad($rad) {

	$rad/180
}

; ::circle($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

::circle("spat1", 0,   2  ,   1.3,  0,  0,  1, 4) ;2π := 1 turn anti-clockwise with a radius of 1.3 during 4 beats
::circle("spat2", 0,   3/4,   1.5,  0,  0,  1, 4) ;3π/4 := go to 135° anti-clockwise (azimuth -45) with a radius of 1.5 during 4 beats
::circle("spat3", 0, -11/8,   1.7,  0,  0,  1, 4) ;-11/8π := -247.5° clockwise => by yy' symmetry  => 5π/8 := 112.5° anti-clockwise

4

print_message @rad2deg(-11/8*$pi) ; just to show the use of a conversion
print_message @deg2rad(-247.5)

print_message @rad2deg(5/8*$pi)
print_message @deg2rad(112.5)


::circle("spat3", 0, @deg2rad(-247.5),   1.7,  0,  0,  1, 4) ; idem clockwise
4
::circle("spat2", 0, @deg2rad(112.5),   1.7,  0,  0,  1, 4) ; idem anti-clockwise

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"


 Event 1 circles_05

lcd_spat clear
lcd_spat drawpict pattern
position_init bang

oscsend sources "127.0.0.1" :4072 "/sources/aed"
sources -90 0. 2 0 0. 2 90 0. 2 -180 0. 2


; ::circle($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)
; cf. figure III circle with offsets1

::circle("spat1", -1, 1, 1,   -1, 0,  1, 4);  from π/180°/Az90 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a positive x offset

4

lcd_spat clear
lcd_spat drawpict pattern
::circle("spat2", 1/2, -1-1/2, 1,  0, 1,  1, 4); from (π/2)/90°/Az0 : 1 turn clockwise during 4 beats, with a radius of 1 and a positive y offset

4

lcd_spat clear
lcd_spat drawpict pattern
::circle("spat3", 0, 2, 1, 1, 0,  1, 4);  from 0/2π/Az90 1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative x offset

4

lcd_spat clear
lcd_spat drawpict pattern
::circle("spat4", 3/2, -2+3/2, 1,  0, -1,  1, 4) ; from (3π/2)/270°/Az-180 1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative y offset

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 circles_06

lcd_spat clear
lcd_spat drawpict pattern

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

::circle("spat1", -1, 1,      1, -1,   0, 1, 4)

::circle("spat2", 1/2, -2+1/2,  1,  0,   1, 1, 4)

::circle("spat3", 0,   2,      1,  1,   0, 1, 4)

::circle("spat4", 3/2, -2+3/2, 1,  0,  -1, 1, 4)

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 circles_07

lcd_spat clear
lcd_spat drawpict pattern

oscsend sources "127.0.0.1" :4072 "/sources/aed"
sources -45 0. 2 45 0. 2 135 0. 2 -135 0. 2

 oscsend spat_zoom "127.0.0.1" :4072 "/display/zoom"
spat_zoom 0.4

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

::circle("spat1", 3/4, 2+3/4, 0.5, -1, 1, 1, 4) ; from 3π/4/ 135°/ Az -45 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative x offset and a positive y offset

4

::circle("spat2", 1/4, 2+1/4, 1.5, 1, 1, 1, 4); from π/4/45°/Az 45 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a positive x and y offset
4

::circle("spat3", 7/4, 2+7/4, 2, 1, -1, 1, 4) ; from 7π/4/315°/Az 135 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and
											  ;a positive x offset and a negative y offset
4

::circle("spat4", 5/4, 2+5/4, 2.5, -1, -1, 2, 4) ; from 5π/4/225°/Az -135 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative x and y offset

8

label "Trajectory Done !"
print_antescofo "Trajectory Done !"


 Event 1 circles_08

lcd_spat clear
lcd_spat drawpict pattern

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

::circle("spat1", 3/4, 2+3/4, 1, -1, 1 , 1, 4)

::circle("spat2", 1/4, 2+1/4, 1, 1, 1, 1, 4)

::circle("spat3", 7/4, 2+7/4, 1, 1, -1, 1, 4)

::circle("spat4", 5/4, 2+5/4, 1, -1, -1, 1, 4)

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 varispeed_circle ; with speed variation

 oscsend spat_zoom "127.0.0.1" :4072 "/display/zoom"
spat_zoom 0.4


lcd_spat clear
lcd_spat drawpict pattern

; ::circle($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $speed)

::vari_circle("spat2", 0, -2, 2, 0, 0, 1, 8) ;-2π := 1 turn clockwise with a radius of 2 during 8 beats
											 ;with speed variation  (TODO implement $vari variables for accurate control of this speed variation)


 Event 1 arc_01

 oscsend spat_zoom "127.0.0.1" :4072 "/display/zoom"
spat_zoom 0.5

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

; cf. patch_folder/figures_folder/spat_circle_figure_II.pdf

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat1", 0,  1/4, 1, 0, 0, 1, 4) ;  go to x = π/4 (radian)/from 0° to 45° , azimuth from 90° to 45°  - anti-clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat2", 0,  3/4, 1, 0, 0, 1, 4) ; go to  π - x = 3π/4, az = -45 - anti-clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat3", 0, 5/4, 1, 0, 0, 1, 4) ;  go to π + x = 5π/4, az = -135 - anti-clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat4", 0, 7/4, 1, 0, 0, 1, 4) ; go to -x = 7π/4, az = 135 - anti-clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat1", 0,  -1/4, 1, 0, 0, 1, 4) ; -x = 7π/4 (radian), azimuth := 90° to 135 clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat2", 0,  -3/4, 1, 0, 0, 1, 4) ;  π + x = 5π/4,  az := 90° to -135° clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat3", 0, -5/4, 1, 0, 0, 1, 4) ;  π - x = 3π/4, az := 90° to -45° clockwise

4

lcd_spat clear
lcd_spat drawpict pattern

::circle("spat4", 0, -7/4, 1, 0, 0, 1, 4) ; x = π/4  , az := 90° to 45° clockwise

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 arcs_02

lcd_spat clear
lcd_spat drawpict pattern

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)
; check cisoïde in rosace library

::circle("spat3", 1, 5/4, 1, 1, 1, 1, 4)

::circle("spat2", 0, -1/4, 1, -1, 1, 1, 4)

::circle("spat1", 0, 1/4, 1, -1, -1, 1, 4)

::circle("spat4", 1, 3/4, 1, 1, -1, 1, 4)

4

::circle("spat3", 5/4, 3/2, 1, 1, 1, 1, 4)

::circle("spat2", 7/4, 3/2, 1, -1, 1, 1, 4)

::circle("spat1", 1/4, 1/2, 1, -1, -1, 1, 4)

::circle("spat4", 3/4, 1/2, 1, 1, -1, 1, 4)

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 arcs_03

lcd_spat clear
lcd_spat drawpict pattern

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

; cf. patch_folder/figures_folder/figure III - offset_symmetry_02.pdf / explain position according to figure III

::circle("spat1", 1/4, 3/4, 1, 0, -1, 1, 4)

::circle("spat2", 1/4, 3/4, 1, 0, -0.8, 1, 4)

::circle("spat3", 1/4, 3/4, 1, 0, -0.6, 1, 4)

::circle("spat4", 1/4, 3/4, 1, 0, -0.4, 1, 4)

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 arcs_04

lcd_spat clear
lcd_spat drawpict pattern

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

::circle("spat1", 3/4, 1/4, 1, 0, -1, 1, 4)

::circle("spat2", 3/4, 1/4, 1, 0, -0.8, 1, 4)

::circle("spat3", 3/4, 2+1/4, 1, 0, -0.6, 1, 4)

::circle("spat4", 3/4, 2+1/4, 1, 0, -0.4, 1, 4)

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

 Event 1 arcs_05

lcd_spat clear
lcd_spat drawpict pattern

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)

;cf figure II for positions according to offset and arc shapes according to X value in radian

0. group source3 @tempo := $RT_TEMPO {

::circle("spat3", 0, 1/2, 0.2, 0.1, 0.1, 1, 4) ; positive x and y offset
4
::circle("spat3", 1/2, 0, 0.4, 0.1, 0.1, 1, 4) ; return ticket
4
::circle("spat3", 0, 1/2, 0.6, 0.1, 0.1, 1, 4) ; expanding radius
4
::circle("spat3", 1/2, 0, 0.8, 0.1, 0.1, 1, 4) ; ; arc shape cf. figure II 0 < x < π/2
4
::circle("spat3", 0, 1/2, 1, 0.1, 0.1, 1, 4)
}


0. group source1 @tempo := $RT_TEMPO {

::circle("spat1", 1,   3/2,  0.2,  -0.1, -0.1,  1, 4) ; negative x and y offset
4
::circle("spat1", 3/2, 1,    0.4,  -0.1, -0.1,  1, 4) ; return ticket
4
::circle("spat1", 1,   3/2,  0.6,  -0.1, -0.1,  1, 4) ; expanding radius
4
::circle("spat1", 3/2, 1,    0.8,  -0.1, -0.1,  1, 4) ; arc shape cf. figure II π < x < 3π/2
4
::circle("spat1", 1,   3/2,  1,    -0.1, -0.1,  1, 4)

}

20

label "Trajectory Done !"
print_antescofo "Trajectory Done !"


 Event 1 figure_II

lcd_spat clear
lcd_spat drawpict pattern

 oscsend spat_zoom "127.0.0.1" :4072 "/display/zoom"
spat_zoom 0.4


::circle("spat1", 1/2, 1,   1,  -1.,  1.,  1, 4)

::circle("spat2", 0,   1/2, 1,   1.,  1.,  1, 4)

::circle("spat3", 1,   3/2, 1,  -1., -1.,  1, 4)

::circle("spat4", 3/2, 2,   1,   1., -1.,  1, 4)

4

label "Trajectory Done !"
print_antescofo "Trajectory Done !"

2

label "End of the score !"
print_antescofo "End of the score, why don't you check the other scripts !"

; Maps with sources' coordinates and states

$SpatSourceAzim := map { 
	( "Quad1", [-45, 45, 135, -135]),	
	( "Quad2", [0, 90, 180, -90]),
	( "LCRRsLs", [-30, 0, 30, 110, -110])
	
}


$SpatSourceDist := map { 
	( "Quad1", [1, 1, 1, 1]),	
	( "Quad2", [2, 2, 2, 2]),
	( "LCRRsLs", [1, 1, 1, 1])
	
}


$SpatSourceElev := map { 
	( "Quad1", [0, 0, 0, 0]),	
	( "Quad2", [0, 0, 0, 0]),
	( "LCRRsLs", [-30, 0, 30, 110, -110])
	
}


$SpatSourceAp := map { 
	( "Quad1", [10, 45, 90, 180]),	
	( "Quad2", [0, 90, 180, -90]),
	( "LCRRsLs", [-30, 0, 30, 110, -110])
		
	
}


; Sources_State_Case_01
; the process using these maps

@proc_def ::setAllSourceState1($spat, $initState, $NumberOfSourcesPositions)
{
		

    forall $x in $NumberOfSourcesPositions
    {
    	@command($spat+($x+1)) az (($SpatSourceAzim($initState))[$x]);
		@command($spat+($x+1)) elev (($SpatSourceElev($initState))[$x])
		@command($spat+($x+1)) dist (($SpatSourceDist($initState))[$x])
		@command($spat+($x+1)) aperture (($SpatSourceAp($initState))[$x])
		
    }

}




///////////////////////////////////////////////////////////////////////////////////////////

;Sources_State_Case_02
; same process with less verbosity

$quad3 := map { 
	( "spat1", [-10, 0, 0.5]),	
	( "spat2", [30, 0, 1]),
	( "spat3", [130, 0, 3]),
	( "spat4", [-145, 0, 1])	
	
}


$SpatSourceAp := map { 
	( "aperture1", [10, 45, 90, 180]),	
	( "Quad2", [0, 90, 180, -90]),
	( "LCRRsLs", [-30, 0, 30, 110, -110]),
	( "Octo", [45, 100, 45, 90, 135, 180, 135, 90])	
	
}





@proc_def ::setAllSourcesState($sourcesmap, $Aperture, $NumberOfSourcesPositions) 
{
	
			forall $source, $aed in $sourcesmap 
			{
				@command($source) aed $aed
				
			}


			forall $x in $NumberOfSourcesPositions 
			{
    
				@command("spat"+($x+1)) aperture (($SpatSourceAp($Aperture))[$x])
		
			}
		

}




///////////////////////////////////////////////////////////////////////////////////////////


;individual_source

$quad13 := map { 
	( "spat1", [-45, 0, 0.5]),	
	( "spat2", [70, 0, 2]),
	( "spat3", [130, 0, 0.3]),
	( "spat4", [15, 1, 1])	
	
}




@proc_def ::setSourceState($sourcemap, $source)
{
		
		
		 @command($source) aed ($sourcemap($source))
		
		
}



///////////////////////////////////////////////////////////////////////////////////////////

;SpeakersQuad

$Speakers_Quad := map { 
	( "speaker1", [-45.000, 0, 1.]), 	
	( "speaker2", [45.000, 0, 1.]), 
	( "speaker3", [135.000, 0, 1. ]), 
	( "speaker4", [-135.000, 0, 1.])
}



@proc_def ::setAllSpeakersState($speakersmap)
{
	
			forall $speaker, $aed in $speakersmap
			{
				@command($speaker) aed $aed
				print_antescofo $speaker aed $aed
			}
		
	
	
}


///////////////////////////////////////////////////////////////////////////////////////////


;Five.One

$SpeakerPosition1 := map { 
	( "Quad1", [10, 45, 90, 180]),	
	( "Quad2", [0, 90, 180, -90]),
	( "LCRRsLs", [-30, 0, 30, 110, -110])
	
}




@proc_def ::setSpeakerState1($initState, $NumberOfSpeakersPositions)
{

    forall $x in $NumberOfSpeakersPositions
    {
    	@command("speaker"+($x+1)) az (($SpatSourceConfig($initState))[$x]);
		;@command($spat+($x+1)) elev (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) dist (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) aperture (($spatConfig($initState))[$x])
		
    }

}




///////////////////////////////////////////////////////////////////////////////////////////


;OctoCube1

$OctoCube := map { 
	( "speaker1", [-45.000, 35.264, 1.732]), 	
	( "speaker2", [45.000, 35.264, 1.732 ]), 
	( "speaker3", [135.000, 35.264, 1.732 ]), 
	( "speaker4", [-135.000, 35.264, 1.732 ]),
	( "speaker5", [-45.000, -35.264, 1.732]), 
	( "speaker6", [45.000, -35.264, 1.732]), 
	( "speaker7", [135.000, -35.264, 1.732]), 
	( "speaker8", [-135.000, -35.264, 1.732])
}

/*$SpeakersOctoCube := tab ["octocube01", "octocube02", "octocube03", "octocube04", "octocube05", "octocube06", "octocube07", "octocube08"]

$dicOctoSpeakers := map {
	("OctoSpeakers", ["octocube01", "octocube02", "octocube03", "octocube04", "octocube05", "octocube06", "octocube07", "octocube08"])
	
	}*/



///////////////////////////////////////////////////////////////////////////////////////////


;SpeakersConfig1

$SpeakersConfig1 := map { 
	( "speaker1", [90.000, -5.003, 1.000]), 	
	( "speaker2", [50.000, -5.003, 1.000]), 
	( "speaker3", [10.000, -5.002, 1.000]), 
	( "speaker4", [-30.000, -5.003, 1.000]), 
	( "speaker5", [-70.000, -5.003, 1.000]), 
	( "speaker6", [-110.000, -5.003, 1.000]), 
	( "speaker7", [-150.000, -5.003, 1.000]), 
	( "speaker8", [170.000, -5.002, 1.000]), 	
	( "speaker9", [130.000, -5.003, 1.000]), 
	( "speaker10", [70.000, 26.001, 1.000]),
	( "speaker11", [30.000, 26.000, 1.000]), 	
	( "speaker12", [-10.002, 26.002, 1.000]), 
	( "speaker13", [-50.000, 26.002, 1.000]),
	( "speaker14", [-90.000, 26.001, 1.000]),
	( "speaker14", [-130.000, 26.002, 1.000]), 
	( "speaker15", [-169.998, 26.002, 1.000]), 
	( "speaker16", [150.000, 26.000, 1.000])
}


///////////////////////////////////////////////////////////////////////////////////////////


;SpeakersConfig2

$SpeakersConfig2 := map { 
	( "speaker1", [-90.000, 0.000, 1.000]), 	
	( "speaker2", [-50.000, 0.000, 1.000]), 
	( "speaker3", [-10.000, 0.000, 1.000]), 
	( "speaker4", [-30.000, 0.000, 1.000]), 
	( "speaker5", [-70.000, 0.000, 1.000]), 
	( "speaker6", [-110.000, 0.000, 1.000]), 
	( "speaker7", [-150.000, 0.000, 1.000]), 
	( "speaker8", [170.000, 0.000, 1.000]), 	 
	( "speaker9", [-170.000, 0.000, 1.000]), 
	( "speaker10", [150.000, 0.000, 1.000]),
	( "speaker11", [110.000, 0.000, 1.000]), 
	( "speaker12", [70.000, 0.000, 1.000]),
	( "speaker13", [30.000, 0.000, 1.000]),
	( "speaker14", [10.000, 0.000, 1.000]),
	( "speaker15", [50.001, 0.000, 1.000]), 
	( "speaker16", [90.000, 0.000, 1.000]) 
}

;$SpeakersConfig4 := tab ["speaker01", "speaker02", "speaker03", "speaker04", "speaker05", "speaker06", "speaker07", "speaker08", "speaker09", "speaker10", "speaker11", "speaker12", "speaker13", "speaker14", "speaker15", "speaker16"]

;$dicoConfig4 := map {
	;("OctoSpeakers", ["sp01", "sp02", "sp03", "sp04", "sp05", "sp06", "sp07", "sp08"])
	
	;}


///////////////////////////////////////////////////////////////////////////////////////////


;SpeakersConfig3

$SpeakersConfig3 := map { 
	( "speaker1", [-45.000, 35.264, 1.732 ]), 	
	( "speaker2", [45.000, 35.264, 1.732 ]), 
	( "speaker3", [135.000, 35.264, 1.732]), 
	( "speaker4", [-135.000, 35.264, 1.732 ]), 
	( "speaker5", [-45.000, -35.264, 1.732 ]), 
	( "speaker6", [45.000, -35.264, 1.732]), 
	( "speaker7", [135.000, -35.264, 1.732]), 
	( "speaker8", [-135.000, -35.264, 1.732]), 	
	( "speaker9", [-45.000, 35.264, 1.732]), 
	( "speaker10", [45.000, 35.264, 1.732]),
	( "speaker11", [135.000, 35.264, 1.732 ]), 	
	( "speaker12", [-135.000, 35.264, 1.732]), 
	( "speaker13", [-45.000, -35.264, 1.732]),
	( "speaker14", [45.000, -35.264, 1.732]),
	( "speaker15", [135.000, -35.264, 1.732 ]), 
	( "speaker16", [-135.000, -35.264, 1.732]) 
	
}


///////////////////////////////////////////////////////////////////////////////////////////


;SpeakersConfig4

$SpeakersConfig4 := map { 
	( "speaker1", [-45.000, 35.264, 1.732 ]), 	
	( "speaker2", [45.000, 35.264, 1.732 ]), 
	( "speaker3", [135.000, 35.264, 1.732]), 
	( "speaker4", [-135.000, 35.264, 1.732 ]), 
	( "speaker5", [-45.000, -35.264, 1.732 ]), 
	( "speaker6", [45.000, -35.264, 1.732]), 
	( "speaker7", [135.000, -35.264, 1.732]), 
	( "speaker8", [-135.000, -35.264, 1.732]), 	
	( "speaker9", [-45.000, 35.264, 1.732]), 
	( "speaker10", [45.000, 35.264, 1.732]),
	( "speaker11", [135.000, 35.264, 1.732 ]), 	
	( "speaker12", [-135.000, 35.264, 1.732]), 
	( "speaker13", [-45.000, -35.264, 1.732]),
	( "speaker14", [45.000, -35.264, 1.732]),
	( "speaker15", [135.000, -35.264, 1.732 ]), 
	( "speaker16", [-135.000, -35.264, 1.732]) 
	
}



@proc_def ::setSpeakerState($sourcemap, $source)
{
		
		
		 @command($source) aed ($sourcemap($source))
		
		
}



///////////////////////////////////////////////////////////////////////////////////////////

;setAllSpeakerState_XY

$SpeakersConfig5 := map { 
	( "speaker1", [-2, 2]), 	
	( "speaker2", [-1, 2]), 
	( "speaker3", [1, 2]), 
	( "speaker4", [2, 2]),
	( "speaker5", [-1.5, 1]), 
	( "speaker6", [-0.5, 1]), 
	( "speaker7", [0.5, 1]), 
	( "speaker8", [1.5, 1]), 
	( "speaker9", [-1.5, -1]), 	
	( "speaker10", [-0.5, -1]), 
	( "speaker11", [0.5, -1]),
	( "speaker12", [1.5, -1]), 	
	( "speaker13", [-2, -2]), 
	( "speaker14", [-1, -2]),
	( "speaker15", [1, -2]),
	( "speaker16", [ 2, -2])
	
}

@proc_def ::setAllSpeakersState_XY($speakersmap)
{
	
			forall $speaker, $xy in $speakersmap
			{
				@command($speaker) xy $xy
				print_antescofo $speaker aed $xy
			}
		
	
	
}




///////////////////////////////////////////////////////////////////////////////////////////


;setSpeakerState_XY

;individual speaker's positioning

$SpeakersConfig6 := map { 
	
	( "speaker6", [1, 3]), 	
	( "speaker7", [3, -1]), 
	( "speaker10", [-1, 3]), 
	( "speaker11", [ -3, -1])
	
}


@proc_def ::setSpeakerState_XY($sourcemap, $source)
{
		
		
		 @command($source) xy ($sourcemap($source))
		
		
}


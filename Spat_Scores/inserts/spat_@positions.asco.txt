BPM 60


source_pos_init bang
spat_windowsize 600
spat_data 3

OPER bang ;speakerspositions,  sourcespositions... etc 


$SpatSourceConfig := map { 
	( "Quad1", [-45, 45, 135, -135]),	
	( "Quad2", [0, 90, 180, -90]),
	( "LCRRsLs", [-30, 0, 30, 110, -110]),
	( "s04", [10, 20, 30, 40]),
	( "s05", [50, 60, 70, 80]), 
	( "s06", [90, 100, 110, 120]),
	( "s07", [130, 140, 150, 160]),
	( "s08", [170, 180, 190, 200]),	
	( "s09", [210, 220, 230, 240]),
	( "s10", [250, 260, 270, 280]),
	( "Octo", [-45, 0, 45, 90, 135, 180, -135, -90]),	
	( "s12", [330, 340, 350, 360])
	
}


$SpatSpeakersOctoCube := map { 
	( "octocube01", [-45.000, 35.264, 1.732]), 	
	( "octocube02", [45.000, 35.264, 1.732 ]), 
	( "octocube03", [135.000, 35.264, 1.732 ]), 
	( "octocube04", [-135.000, 35.264, 1.732 ]),
	( "octocube05", [-45.000, -35.264, 1.732]), 
	( "octocube06", [45.000, -35.264, 1.732]), 
	( "octocube07", [135.000, -35.264, 1.732]), 
	( "octocube08", [-135.000, -35.264, 1.732])
}



$SpatSpeakersConfig1 := map { 
	( "sp01", [90.000, -5.003, 1.000]), 	
	( "sp02", [50.000, -5.003, 1.000]), 
	( "sp03", [10.000, -5.002, 1.000]), 
	( "sp04", [-30.000, -5.003, 1.000]), 
	( "sp05", [-70.000, -5.003, 1.000]), 
	( "sp06", [-110.000, -5.003, 1.000]), 
	( "sp07", [-150.000, -5.003, 1.000]), 
	( "sp08", [170.000, -5.002, 1.000]), 	
	( "sp09", [130.000, -5.003, 1.000]), 
	( "sp10", [70.000, 26.001, 1.000]),
	( "sp11", [30.000, 26.000, 1.000]), 	
	( "sp12", [-10.002, 26.002, 1.000]), 
	( "sp13", [-50.000, 26.002, 1.000]),
	( "sp13", [-90.000, 26.001, 1.000]),
	( "sp14", [-130.000, 26.002, 1.000]), 
	( "sp15", [-169.998, 26.002, 1.000]), 
	( "sp16", [150.000, 26.000, 1.000]),
	( "sp17", [110.000, 26.001, 1.000]), 
	( "sp18", [90.000, 57.003, 1.000]), 
	( "sp19", [18.000, 57.000, 1.000]),
	( "sp20", [-54.001, 57.003, 1.000]),
	( "sp21", [-125.999, 57.003, 1.000]),
	( "sp22", [162.000, 57.000, 1.000]), 
	( "sp23", [90.000, 90.000, 1.000])
}





$SpatSpeakersConfig2 := map { 
	( "sp01", [-45.000, 35.264, 1.732 ]), 	
	( "sp02", [45.000, 35.264, 1.732 ]), 
	( "sp03", [135.000, 35.264, 1.732]), 
	( "sp04", [-135.000, 35.264, 1.732 ]), 
	( "sp05", [-45.000, -35.264, 1.732 ]), 
	( "sp06", [45.000, -35.264, 1.732]), 
	( "sp07", [135.000, -35.264, 1.732]), 
	( "sp08", [-135.000, -35.264, 1.732]), 	
	( "sp09", [-45.000, 35.264, 1.732]), 
	( "sp10", [45.000, 35.264, 1.732]),
	( "sp11", [135.000, 35.264, 1.732 ]), 	
	( "sp12", [-135.000, 35.264, 1.732]), 
	( "sp13", [-45.000, -35.264, 1.732]),
	( "sp13", [45.000, -35.264, 1.732]),
	( "sp14", [135.000, -35.264, 1.732 ]), 
	( "sp15", [-135.000, -35.264, 1.732]) 
	
}


$SpatSpeakersConfig3 := map { 
	( "sp01", [-2, 2]), 	
	( "sp02", [-1, 2]), 
	( "sp03", [1, 2]), 
	( "sp04", [2, 2]),
	( "sp05", [-1.5, 1]), 
	( "sp06", [-0.5, 1]), 
	( "sp07", [0.5, 1]), 
	( "sp08", [1.5, 1]), 
	( "sp09", [-1.5, -1]), 	
	( "sp10", [-0.5, -1]), 
	( "sp11", [0.5, -1]),
	( "sp12", [1.5, -1]), 	
	( "sp13", [-2, -2]), 
	( "sp14", [-1, -2]),
	( "sp15", [1, -2]),
	( "sp16", [ 2, -2])
	
}


$SpatSpeakersConfig4 := map { 
	( "sp01", [-90.000, 0, 1.000]), 	
	( "sp02", [-50.000, 0, 1.000]), 
	( "sp03", [-10.000, 0, 1.000]), 
	( "sp04", [-30.000, 0, 1.000]), 
	( "sp05", [-70.000, 0, 1.000]), 
	( "sp06", [-110.000, 0, 1.000]), 
	( "sp07", [-150.000, 0, 1.000]), 
	( "sp08", [170.000, 0, 1.000]), 	 
	( "sp09", [-170.000, 0, 1.000]), 
	( "sp10", [150.000, 0, 1.000]),
	( "sp11", [110.000, 0, 1.000]), 
	( "sp12", [70.000, 0, 1.000]),
	( "sp13", [30.000, 0, 1.000]),
	( "sp14", [10.000, 0, 1.000]),
	( "sp15", [50.001, 0, 1.000]), 
	( "sp16", [90.000, 0, 1.000]) 
}


$SpatSpeakersConfig4 := map { 
	 ("LCRRsLs", [-30, 0, 30, 110, -110]),
	("LCRRsLs", [-30, 0, 30, 110, -110])
	
}


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@






@proc_def ::setSourceState($spat, $initState, $NumberOfSourcesPositions)
{
		

  $t := tab [$x | $x in $NumberOfSourcesPositions]
    forall $x in $t
    {
    	@command($spat+($x+1)) az (($SpatSourceConfig($initState))[$x]);
		;@command($spat+($x+1)) elev (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) dist (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) aperture (($spatConfig($initState))[$x])
		
    }

}

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


$NumberOfPositions := 4

let $x := 2

@proc_def ::setSourceState_Individual($spat, $initState)
{

    	@command($spat) az (($SpatSourceConfig($initState))[$x]);
		;@command($spat+($x+1)) elev (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) dist (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) aperture (($spatConfig($initState))[$x])

}


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





@proc_def ::setSpeakerState($spat, $initState, $NumberOfSpeakersPositions)
{
	
		


  $t := tab [$x | $x in $NumberOfSpeakersPositions]
    forall $x in $t
    {
    	@command($spat+($x+1)) az (($SpatSourceConfig($initState))[$x]);
		;@command($spat+($x+1)) elev (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) dist (($spatConfig($initState))[$x])
		;@command($spat+($x+1)) aperture (($spatConfig($initState))[$x])
		
    }

}

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@proc_def ::setSpeakerState_AED($spat, $initState, $NumberOfSpeakersPositions)
{


  $t := tab [$x | $x in $NumberOfSpeakersPositions]
    forall $x in $t
    {
    	@command("spat"+($x+1)) aed (($SpatSpeakersConfig($initState))[0])\
								   (($SpatSpeakersConfig($initState))[1])\
									(($SpatSpeakersConfig($initState))[2])
		
		
		
		
    }

}


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@proc_def ::setSpeakerState_AED_Individual($id, $initState, $NumberOfSpeakers )
{

    	@command("spat"+ ($id)) aed (($SpatSpeakersConfig($initState))[0])\
		(($SpatSpeakersConfig($initState))[1])\
		(($SpatSpeakersConfig($initState))[2])
		
		
}


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


$NumberOfPositions := 4

@proc_def ::setSpeakerState_XY($spat, $initState)
{


  $t := tab [$x | $x in 4]
    forall $x in $t
    {
    	@command($spat+($x+1)) xy (($SpatSpeakersConfig1($initState))[0])\
								   (($SpatSpeakersConfig1($initState))[1])\
									
		
		
		
		
    }

}


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@proc_def ::setSpeakerState_XY_Individual($spat, $initState)
{

		@command($spat) xy (($SpatSpeakersConfig($initState))[0])\
							(($SpatSpeakersConfig($initState))[1])
		
		
}



;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Event 1  Quad2

spat_data 2
::setSourceState("spat", "Quad2", 4)

Event 1 Five.One

;OPER speaker $1 name$2 1 L, 2 C, 3 R, 4 Rs, 5 Ls

spat_data 3

let $SpatSpeakersConfig := $SpatSpeakersConfig4

::setSpeakerState("spat", "LCRRsLs", 5)



Event 1 OctoCube1

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





$SpeakersOctoCube := tab ["octocube01", "octocube02", "octocube03", "octocube04", "octocube05", "octocube06", "octocube07", "octocube08"]

$dicOctoSpeakers := map {
	("OctoSpeakers", ["octocube01", "octocube02", "octocube03", "octocube04", "octocube05", "octocube06", "octocube07", "octocube08"])
	
	}

@proc_def ::setAllSpeakersState($spat, $speakerstab, $NumberOfSpeakers)
{
	if (@is_tab($speakerstab))
	{
	    if (@size($speakerstab) != $NumberOfSpeakers)
	    {
	    	print_antescofo "ERROR: incorrect numbers of mobules in ::setAllSpeakersState: got" (@size($speakerstab)) "expected:" ($NumberOfSpeakersPositions) 
	    }
	    else
	    {
			forall $i in @size($speakerstab)
			{
				::setSpeakerState_AED_Individual(($i+1), $speakerstab[$i], $NumberOfSpeakers)
			}
		}
	}
	else
	{
		print_antescofo "ERROR: :setAllSpeakersState expect a tab as argument, got" ($speakerstab)
	}
}


@macro_def @setSpeakersConfig($spat, $x, $NumberOfSpeakers ) 
{ 
	
	::setAllSpeakersState($spat, $dicOctoSpeakers($x), $NumberOfSpeakers) 
	
	print_antescofo ($dicOctoSpeakers($x))
}

let $SpatSpeakersConfig := $SpatSpeakersOctoCube

;::setSpeakerState_AED("spat", "octocube01", 4)

$NumberOfSpeakersPositions := 8

::setAllSpeakersState("spat", $SpeakersOctoCube, 8)

4

@setSpeakersConfig("spat", 1)


print_message @size($SpeakersOctoCube)


Event 1 config4


::setAllSpeakersState("spat", $SpeakersOctoCube, 8)









Event 1  AED1

let $SpatSpeakersConfig := $SpatSpeakersConfig1
::setSpeakerState_AED("spat", "sp13", 16)



Event 1  setSpeakerState_AED_Individual



::setSpeakerState_AED_Individual("spat1", "sp01")
::setSpeakerState_AED_Individual("spat2", "sp11")
::setSpeakerState_AED_Individual("spat3", "sp05")
::setSpeakerState_AED_Individual("spat4", "sp07")




Event 1  setSpeakerState_XY


let $SpatSpeakersConfig := $SpatSpeakersConfig3

::setSpeakerState_XY("spat", "sp03")


Event 1 one_by_one
;individual speaker's positioning

::setSpeakerState_XY_Individual("spat1", "sp16")
::setSpeakerState_XY_Individual("spat2", "sp11")
::setSpeakerState_XY_Individual("spat3", "sp05")
::setSpeakerState_XY_Individual("spat4", "sp07")


